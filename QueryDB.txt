-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
-- DATABASE
-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

DROP DATABASE UGTO; -- Delete when done
CREATE DATABASE UGTO;
USE UGTO;

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
-- TABLAS
-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

CREATE TABLE Personas(
	idPersona int not null auto_increment primary key,
	Nombre varchar(25) not null,
	ApellidoP VARCHAR(25) not null,
	ApellidoM varchar(25) not  null,
	Edad int,
	Sexo varchar(1) not null, -- M = Masculino, F = Femenino, N = No binario
	RFC varchar(12) not null,
	Correo varchar(50) not null,
	Telefono varchar(10) not null,
	CURP varchar(18) not null);


CREATE TABLE Carrera(
    idCarrera int not null auto_increment primary key,
	Nombre varchar(50) not null);

CREATE TABLE Alumnos(
    NUA varchar(6) not null primary key,
	idPersona int,
	foreign key(idPersona) REFERENCES Personas (idPersona),
	idCarrera int,
	Semestre varchar(2) not null,
	Promedio varchar(5) not null,
	mensaje varchar(200) Default "No tienes mensajes");

create table Administrativos(
    NUE varchar(6) not null primary key, 
	idPersona int,
	Foreign key(idPersona) References Personas (idPersona),
	pendientes varchar (200) default "No hay pendientes");

create table estado(
    idStatus int not null auto_increment primary key,
	Descripcion varchar (25));
    
CREATE table Subarea(
	idSubarea int not null AUTO_INCREMENT PRIMARY KEY,
	nombreArea varchar (35));

CREATE table actividad (
    idActividad int not null auto_increment primary key,
   	titulo varchar (200) not null,
    descripcion varchar (500) not null,
    idSubarea int,
    Foreign key(idSubarea) References Subarea (idSubarea),
    idCarrera int,
    Foreign key(idCarrera) References Carrera (idCarrera),
    NUA varchar(6),
    Foreign key(NUA) References Alumnos (NUA),  
    fechaInicio date not null,
    fechaFin date not null,
    noHoras int not null,
    organizador varchar (100),
    evidencia blob,
    idStatus int DEFAULT 0, 
    Foreign key(idStatus) References estado (idStatus));
    
CREATE TABLE avance (
    idavance int not null AUTO_INCREMENT PRIMARY KEY,
    NUA varchar(6),
    Foreign key(NUA) References Alumnos (NUA),	
    idSubarea int,
    Foreign key(idSubarea) References Subarea (idSubarea),
    creditos decimal (5,2) NOT null DEFAULT 0,
    creditosFaltan decimal (5,2) not null,
    noActividades int not null DEFAULT 0,
    porcentaje int not null DEFAULT 0);
    

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
-- STORED PROCEDURES
-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

-- //////////////// Inserta una actividad
DELIMITER $$
CREATE PROCEDURE sp_insertActividades(
    in titulo varchar (200),
    in descripcion varchar (500),
    in idSubarea int,
    in idCarrera int,
    in NUA varchar (6),
	in fechaInicio date,
	in fechaFin date,
	in noHoras int,
	in organizador varchar (100),
	in evidencia blob)
BEGIN
    INSERT into actividad (titulo, descripcion,idSubarea, idCarrera, NUA, fechaInicio, fechaFin, noHoras, organizador, evidencia)
    VALUES(UPPER(titulo), UPPER(descripcion),idSubarea, idCarrera, NUA, fechaInicio, fechaFin, noHoras, UPPER(organizador), evidencia);
END $$

-- //////////////// Inserta un alumno
DELIMITER $$
CREATE PROCEDURE sp_insertAlumnos(
    in Nombre varchar(25),
    in ApellidoP VARCHAR(25),
    in ApellidoM varchar(25),
    in Edad int,
	in Sexo varchar(1),
	in RFC varchar(12),
	in Correo varchar(50),
	in Telefono varchar(50),
	in CURP varchar(18),
	in NUA varchar (6),
	in idCarrera int,
	in Semestre varchar(2),
	in Promedio varchar(5) )
BEGIN
	-- Personas
    INSERT into Personas (Nombre, ApellidoP, ApellidoM, Edad, Sexo, RFC, Correo, Telefono, CURP)
    VALUES (UPPER(Nombre), UPPER(ApellidoP), UPPER(ApellidoM), Edad, Sexo, UPPER(RFC), Correo, Telefono, UPPER(CURP));
    -- Alumnos

	SET @idPersona = LAST_INSERT_ID();
    INSERT into Alumnos (NUA, idPersona, idCarrera, Semestre, Promedio)
    VALUES (NUA, @idPersona, idCarrera, Semestre, Promedio);
END $$

-- //////////////// Inserta un administrador
DELIMITER $$
CREATE PROCEDURE sp_insertAdmin(
    in Nombre varchar(25),
    in ApellidoP VARCHAR(25),
    in ApellidoM varchar(25),
    in Edad int,
	in Sexo varchar(1),
	in RFC varchar(12),
	in Correo varchar(50),
	in Telefono varchar(50),
	in CURP varchar(18),
	in NUE varchar(6) )
BEGIN
	-- Personas
    INSERT into Personas (Nombre, ApellidoP, ApellidoM, Edad, Sexo, RFC, Correo, Telefono, CURP)
    VALUES (UPPER(Nombre), UPPER(ApellidoP), UPPER(ApellidoM), Edad, Sexo, UPPER(RFC), Correo, Telefono, UPPER(CURP));

	SET @idPersona = LAST_INSERT_ID();
    -- Administrativos
    INSERT into Administrativos (NUE, idPersona )
    VALUES (NUE, @idPersona);
END $$

-- //////////////// Actualiza el estado de una actividad
DELIMITER $$
CREATE PROCEDURE sp_cambiarStatus(
    in idAct int,
    in nuevoStatus int)
BEGIN
    UPDATE actividad 
    SET idStatus = nuevoStatus
	WHERE idActividad = idAct;
END $$

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
-- Insert on tables
-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

-- Carreras
INSERT INTO Carrera (Nombre) VALUES ("Ingeniería en comunicaciones y electrónica");
INSERT INTO Carrera (Nombre) VALUES ("Ingeniería en sistemas computacionales");
INSERT INTO Carrera (Nombre) VALUES ("Gestión empresarial");
INSERT INTO Carrera (Nombre) VALUES ("Enseñanza del inglés");


-- Areas
INSERT INTO Subarea (nombreArea) VALUES ("Desarrollo personal");
INSERT INTO Subarea (nombreArea) VALUES ("Responsabilidad social");
INSERT INTO Subarea (nombreArea) VALUES ("Creatividad y espíritu emprendedor");
INSERT INTO Subarea (nombreArea) VALUES ("Formación cultural e intercultural");
INSERT INTO Subarea (nombreArea) VALUES ("Área complementaria");

-- Estados
INSERT INTO estado (Descripcion) VALUES ("Enviado");
INSERT INTO estado (Descripcion) VALUES ("Aceptado");
INSERT INTO estado (Descripcion) VALUES ("Modificado");
INSERT INTO estado (Descripcion) VALUES ("Rechazado");


-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
-- Funciones
-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

-- Calcula cantidad de creditos faltantes al iniciar
DELIMITER //
CREATE FUNCTION calcularCredFal (idCarrera int, idSubarea int)
RETURNS decimal (5,2)
BEGIN
	DECLARE pe varchar(50); 
    DECLARE area varchar(30); 
    SET pe = (SELECT Nombre FROM Carrera WHERE idCarrera = idCarrera);
    SET area = (SELECT nombreArea FROM Subarea WHERE idSubarea = idSubarea);
   
    IF pe = "Enseñanza del inglés" THEN
        IF area = "Desarrollo personal" THEN
        	RETURN 2;
        ELSEIF area = "Responsabilidad social" THEN
        	RETURN 2;
        ELSEIF area = "Creatividad y espíritu emprendedor" THEN
        	RETURN 2;
        ELSEIF area = "Formación cultural e intercultural" THEN
        	RETURN 10;
        ELSEIF area = "Área complementaria" THEN
        	RETURN 0;
        ELSE
        	RETURN 0;
        END IF;
    ELSE
    	IF area = "Desarrollo personal" THEN
        	RETURN 2;
        ELSEIF area = "Responsabilidad social" THEN
        	RETURN 2;
        ELSEIF area = "Creatividad y espíritu emprendedor" THEN
        	RETURN 2;
        ELSEIF area = "Formación cultural e intercultural" THEN
        	RETURN 2;
        ELSEIF area = "Área complementaria" THEN
        	RETURN 5;
        ELSE
        	RETURN 0;
        END IF;
    END IF;
END; //
DELIMITER ;



-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
-- Triggers
-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

DELIMITER $$
CREATE TRIGGER TR_InsertAvance
	AFTER INSERT ON Alumnos
	FOR EACH ROW
BEGIN
	DECLARE idCarrera_temp int;
    SELECT idCarrera INTO idCarrera_temp FROM Alumnos WHERE NUA = NEW.NUA;
    
  	INSERT INTO avance (NUA, creditosFaltan)
  	VALUES (NEW.NUA, calcularCredFal(idCarrera_temp ,1));

	INSERT INTO avance (NUA, creditosFaltan)
  	VALUES (NEW.NUA, calcularCredFal(idCarrera_temp ,2));

	INSERT INTO avance (NUA, creditosFaltan)
  	VALUES (NEW.NUA, calcularCredFal(idCarrera_temp ,3));

	INSERT INTO avance (NUA, creditosFaltan)
  	VALUES (NEW.NUA, calcularCredFal(idCarrera_temp ,4));

	INSERT INTO avance (NUA, creditosFaltan)
  	VALUES (NEW.NUA, calcularCredFal(idCarrera_temp ,5));
END;
$$
    
-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
-- Call SP
-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    
